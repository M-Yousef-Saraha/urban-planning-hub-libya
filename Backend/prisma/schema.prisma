// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requests  DocumentRequest[]

  @@map("users")
}

model Document {
  id          String            @id @default(cuid())
  title       String
  description String?
  category    DocumentCategory
  categoryId  String?           // New: Link to hierarchical categories
  locationId  String?           // New: Link to geographic locations
  filePath    String
  fileName    String
  fileSize    Int
  mimeType    String
  fileType    FileType?         // New: Enhanced file type classification
  tags        String[]          // New: Flexible tagging system
  keywords    String[]          // New: Searchable keywords
  isActive    Boolean           @default(true)
  isFeatured  Boolean           @default(false)  // New: Featured documents
  downloadCount Int             @default(0)      // New: Track popularity
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  requests    DocumentRequest[]
  hierarchicalCategory Category? @relation(fields: [categoryId], references: [id])
  location    Location?         @relation(fields: [locationId], references: [id])

  @@map("documents")
}

model DocumentRequest {
  id         String        @id @default(cuid())
  userId     String
  documentId String
  purpose    String
  urgency    UrgencyLevel
  notes      String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id])
  document   Document      @relation(fields: [documentId], references: [id])

  @@map("document_requests")
}

enum Role {
  USER
  ADMIN
}

// Keep for backward compatibility, but add new hierarchical system
enum DocumentCategory {
  GUIDES
  LAWS
  STANDARDS
  REPORTS
  MAPS
  STUDIES
}

// New: Hierarchical category system
model Category {
  id          String     @id @default(cuid())
  name        String
  nameAr      String     // Arabic name
  slug        String     @unique
  description String?
  icon        String?    // Icon identifier
  color       String?    // Color theme
  parentId    String?    // Self-referential for hierarchy
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  documents   Document[]
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

// New: Geographic organization system
model Location {
  id          String     @id @default(cuid())
  name        String     @unique // e.g., "Tripoli", "Benghazi"
  nameAr      String     // Arabic name
  type        LocationType
  parentId    String?    // For hierarchy: Country > Governorate > City
  parent      Location?  @relation("LocationHierarchy", fields: [parentId], references: [id])
  children    Location[] @relation("LocationHierarchy")
  documents   Document[]
  latitude    Float?     // GPS coordinates for mapping
  longitude   Float?
  population  Int?       // City statistics
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("locations")
}

enum LocationType {
  COUNTRY
  GOVERNORATE  // محافظة
  CITY         // مدينة
  DISTRICT     // منطقة
  ZONE         // نطاق
}

enum FileType {
  PDF
  WORD
  EXCEL
  POWERPOINT
  IMAGE
  VIDEO
  AUDIO
  ARCHIVE
  TEXT
  CAD
  GIS
  OTHER
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

